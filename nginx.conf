user  nginx;
worker_processes  auto;
 
error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;
 
 
events {
    worker_connections  1024;
}
 
 
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
 
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
 
    access_log  /var/log/nginx/access.log  main;
 
    sendfile        on;
    #tcp_nopush     on;
 
    keepalive_timeout  65;
 
    #gzip  on;
 
    #include /etc/nginx/conf.d/*.conf;
 
 
  server {
    listen 80;
 
    root /usr/share/nginx/html;
    index index.html index.htm;
    server_name localhost;
 
    client_max_body_size 100M;
 
    add_header  X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";
    error_log   /var/log/nginx/pr.error.log;
    access_log  /var/log/nginx/pr.access.log combined;
    server_tokens off;
 
    error_page 404 /index.html;
    # Enable Gzip compressed.
    gzip on;
    # Enable compression both for HTTP/1.0 and HTTP/1.1 (required for CloudFront).
    gzip_http_version 1.0;
    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level 5;
    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length 256;
    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied any;
    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary on;
    # Compress all output labeled with one of the following MIME-types.
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/plain
        text/x-component;
        # text/html is always compressed by HttpGzipModule
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    location ~* \.(?:manifest|appcache|html?|xml|json)$ {
        expires -1;
    }
 
    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to redirecting to index.html
        root /usr/share/nginx/html/;
        try_files $uri $uri/ /index.html;
    }
    # Media: images, icons, video, audio, HTC
    # location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
    #     expires 1M;
    #     access_log off;
    #     add_header Cache-Control "public";
    # }
    location ~* \.(?:css|js)$ {
        try_files $uri =404;
        expires 1y;
        access_log off;
        add_header Cache-Control "public";
    }
    # Any route containing a file extension (e.g. /devicesfile.js)
    # location ~ ^.+\..+$ {
    #     try_files $uri =404;
    # }
    # location /static/ {
    #   alias /usr/share/nginx/html/web/;
    #   access_log off;
    #   expires 1y;
    # }
  }
}
 
 
